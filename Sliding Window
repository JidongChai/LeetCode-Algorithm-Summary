Sliding Window Related Questions

Q1: Count distinct elements in every window of size k
Description: Given an array of size n and an integer k, return the of count of distinct numbers in all windows of size k.
E.g., Input:  arr[] = {1, 2, 1, 3, 4, 2, 3};
              k = 4
Output:       (window)
3             1 2 1 3
4             2 1 3 4
4             1 3 4 2
3             3 4 2 3

http://www.geeksforgeeks.org/count-distinct-elements-in-every-window-of-size-k/

Brute force: count distinct elements in a window (O(n * k^2)), which can be improved to O(n * klogk) using sorting.
O(n): Using a map
//Didn't test yet
public int[] countDistinctElements(int[] nums, int k) {
    if (nums == null || nums.length < k) return -1;
    Map<Integer, Integer> map = new HashMap<>();
    int[] res = new int[nums.length - k + 1];
    int index = 0;
    for (int i = 0; i < k; i++) {
        map.put(nums[i], map.getOrDefault(nums[i], 0) + 1);
    }
    int count = map.size();     //count first window
    res[index++] = count;
    for (int i = k; i < nums.length; i++) {
        int old = nums[i - k];
        map.put(old, map.get(old) - 1);
        if (map.get(old) == 0) {
            map.remove(old);
            count--;
        }
        if (!map.containsKey(nums[i])) {
            count++;
            map.put(nums[i], 1);
        } else {
            map.put(nums[i], map.get(nums[i]) + 1);
        }
        res[index++] = count;
    }
    return res;
}

//Lintcode
Q2: Sliding Window Unique Elements Sum
Given an array and a window size that is sliding along the array, find the sum of the count of unique elements in each window.
Given a array nums = [1, 2, 1, 3, 3] and k = 3

First window [1, 2, 1], only 2 is unique, count is 1.
Second window [2, 1, 3], all elements unique, count is 3.
Third window [1, 3, 3], only 1 is unique, count is 1.
sum of count = 1 + 3 + 1 = 5


Q3: sliding window maximum/minimum, Follow up: Stream
Window position                Max
---------------               -----
[1  3  -1] -3  5  3  6  7       3
 1 [3  -1  -3] 5  3  6  7       3
 1  3 [-1  -3  5] 3  6  7       5
 1  3  -1 [-3  5  3] 6  7       5
 1  3  -1  -3 [5  3  6] 7       6
 1  3  -1  -3  5 [3  6  7]      7

 public int[] maxSlidingWindow(int[] nums, int k) {
    if (nums.length == 0) return new int[0];
    int n = nums.length;
    int[] res = new int[n - k + 1];
    //int index = 0;
    Deque<Integer> q = new ArrayDeque<>();
    for (int i = 0; i < n; i++) {
        if (!q.isEmpty() && q.peek() < i - k + 1) {
            q.poll();
        }
        while (!q.isEmpty() && nums[q.peekLast()] < nums[i]) {
            q.pollLast();
        }
        q.offer(i);
        if (i >= k - 1) {
            res[i - k + 1] = nums[q.peek()];
        }
    }
    return res;
 }


295. Find Median from Data Stream
[2,3,4] , the median is 3
[2,3], the median is (2 + 3) / 2 = 2.5
//minHeap: keep the larger ones, 4,3
//maxHeap: keep the smaller ones, 2
//if (minHeap.size() > maxHeap.size()) return minHeap.peek();
//else if (minHeap.size() == maxHeap.size()) return (minHeap.peek() + maxHeap.peek()) / 2.0;

480. Sliding Window Median
Given nums = [1,3,-1,-3,5,3,6,7], and k = 3.
Window position                Median
---------------               -----
[1  3  -1] -3  5  3  6  7       1
 1 [3  -1  -3] 5  3  6  7       -1
 1  3 [-1  -3  5] 3  6  7       -1
 1  3  -1 [-3  5  3] 6  7       3
 1  3  -1  -3 [5  3  6] 7       5
 1  3  -1  -3  5 [3  6  7]      6
 return the median sliding window as [1,-1,-1,3,5,6]

 public double[] medianSlidingWindow(int[] nums, int k) {
    int n = nums.length;
    int[] res = new int[n - k + 1];
    for (int i = 0; i <= n; i++) {
        if (i >= k) {
            res[i - k] = getMedian();
            remove(nums[i - k]);
        }
        if (i < n) {
            add(nums[i]);
        }
     }
     return res;
 }
//getMedian is similar to 295...add and remove are based on getMedian and then perform
